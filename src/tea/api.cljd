(ns tea.api
  (:require
    [cljd.walk :refer [keywordize-keys]]
    [clojure.string :refer [join]]
    ["package:graphql/client.dart" :as g]))

(defn- log [& args]
  (dart:core/print (join " " args)))

(def ^{:private true :const true} 
  base-url "https://countries.trevorblades.com/")

(def ^:private http-link (g/HttpLink base-url))

(def ^{:private true :conts true} query-get-countries 
"query {
  countries{
    name
    code
  }
}")

(def ^{:private true :const true} query-get-country  
"query getCountry($code:ID!){
  country(code:$code){
    name
    capital
    code
    native
    currency
    phone
    emoji
    continent { 
      name 
      code
    }
  }
}")

(def ^{:private true :const true} query-get-continents  
"query getContinent($code:ID!){
  continent(code:$code){
    name
    code
    countries { name code }
  }
}")


(def ^:private client 
  (g/GraphQLClient :link http-link 
                   :cache (g/GraphQLCache :store (g/InMemoryStore.))))

(defn- keywordize-blunt [entry]
  (cond 
    (dart/is? entry Map) 
    (loop [result {}
           entries (seq entry) ]
      (let [[k v] (first entries)]
        (if k
          (recur 
            (assoc result 
                   (keyword k)
                   (keywordize-blunt v))
            (rest entries))
          result)))

    (dart/is? entry List)
    (map (fn [e] (keywordize-blunt e)) entry)

    :else entry))

(defn ^:async get-countries []
  (let [opts  (g/QueryOptions :document (g/gql query-get-countries))
        result (-> client (.query opts) await)]
    (if (.hasException result)
      {:error (.exception! result)}
      (keywordize-keys (-> result .data keywordize-blunt :countries)))))

(defn ^:async get-country [code]
  (let [opts (g/QueryOptions :document (g/gql query-get-country)
                             :variables (. {"code" code} #/(cast String dynamic)))
        result (-> client (.query opts) await)]
    (if (.hasException result)
      {:error (.exception! result)}
      (keywordize-keys (-> result .data keywordize-blunt :country)))))

(defn ^:async get-continent [code]
  (let [opts (g/QueryOption :document (g/gql query-get-continents)
                            :variables (. {"code" code} #/(cast String dynamic)))
        result (-> client (.query opts) await)]
    (if (.hasException result)
      {:error (.exception! result)}
      (keywordize-keys (-> result .data keywordize-blunt :continent)))))
