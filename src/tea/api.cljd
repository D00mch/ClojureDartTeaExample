(ns tea.api
  (:require
    [cljd.walk :refer [keywordize-keys]]
    [clojure.string :refer [join]]
    ["package:graphql/client.dart" :as g]
    ["package:flutter/material.dart" :as m]))

(defn- log [& args]
  (dart:core/print (join " " args)))

(def ^{:private true :const true} 
  base-url "https://countries.trevorblades.com/")

(def ^:private http-link (g/HttpLink. base-url))

(def ^{:private true :conts true}
  query-get-countries (str "query {
                              countries{
                                  code
                                  name
                              }
                           }"))

(def ^:private client 
  (g/GraphQLClient. :link http-link 
                    :cache (g/GraphQLCache. :store (g/InMemoryStore.))))

(defn- keywordize-blunt [entry]
  (cond 
    (dart/is? entry Map) 
    (loop [result {}
           entries (seq entry) ]
      (let [[k v] (first entries)]
        (if k
          (recur 
            (assoc result 
                   (keyword k)
                   (keywordize-blunt v))
            (rest entries))
          result)))

    (dart/is? entry List)
    (map (fn [e] (keywordize-blunt e)) entry)

    :else entry))

(defn get-countries []
  (let [^:m/QueryResult result (await 
                                 (.query client 
                                         (g/QueryOptions 
                                           :document (g/gql query-get-countries))))
        map-result (.-data result)]
    ; (print "runtimeType " (.-runtimeType (get map-result "countries")))
    ; (print "instance " (sequential? (get map-result "countries")))
    ; (print "result not keywordize " (keywordize-blunt (into {} map-result)))
    ; (print "but the function works " (keywordize-keys {"a" 1}))
    (log "andorra: " )
    (if (.-hasException result)
      (throw (.exception! result))
      (keywordize-keys (-> map-result keywordize-blunt :countries)))))
